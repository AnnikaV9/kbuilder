#!/usr/bin/env bash
#
# Bash script for building custom kernels in Arch Linux.
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>
#

VERSION="0.3.3"
DESC="Bash script for building custom kernels in Arch Linux"
KBUILDER_DIR="$HOME/.kbuilder"
HOOKS_DIR="/etc/kbuilder/hooks"
SOURCE_URL="https://gitlab.archlinux.org/archlinux/packaging/packages"

print() {
    case $1 in
        err) echo "==> ERROR: $2" >&2 && exit 1 ;;
        nor) echo "==> $2" ;;
        low) echo "  -> $2" ;;
        no) echo "$2" ;;
        nonew) echo -n "$2" ;;
        err_no) echo "$2" && echo "==> ERROR: $3" >&2 && exit 1 ;;
        low_nonew) echo -n "  -> $2" ;;
        nor_nonew) echo -n "==> $2" ;;
        err_h) echo "==> ERROR: $2" >&2 && help && exit 1 ;;
    esac
}


remove() {
    rm -rf "$1" || print err "Could not delete $1"
}

check_and_create() {
    print nor "Checking $1"
    [[ -d "$1" ]] && print low "$1 exists, removing" && remove $1
    print low "Creating $1"
    mkdir -p $1 || print err "Could not create $1"
}

command_install () {
    [[ ! -d "$KBUILDER_DIR/cache" ]] && print err "Kernel hasn't been built yet"

    print nor "Installing kernel packages with pacman..."
    comm="pacman -U $KBUILDER_DIR/cache/*.pkg.tar.zst "
    sudo $comm || print err "$comm did not complete successfully"

    print nor "Deleting $KBUILDER_DIR/cache..."
    remove $KBUILDER_DIR/cache

    print nor "Kernel installed successfully"
}

command_build () {
    check_and_create $KBUILDER_DIR/cache

    print nor "Resolving source package..."
    if [[ -z "$KBUILDER_SOURCE_PKG" ]]; then
        print low "Using default 'linux'"
        KBUILDER_SOURCE_PKG="linux"
    else
        if [[ "linux linux-lts linux-zen linux-hardened" =~ (" "|^)$KBUILDER_SOURCE_PKG(" "|$) ]]; then
            print low "Using '$KBUILDER_SOURCE_PKG'"
        else
            print low "$KBUILDER_SOURCE_PKG is not supported, using default 'linux'"
            KBUILDER_SOURCE_PKG="linux"
        fi
    fi

    print nor "Fetching required files..."
    for fetch in PKGBUILD config; do
    	print low_nonew "$fetch... "
    	curl --silent -o $KBUILDER_DIR/cache/$fetch "$SOURCE_URL/$KBUILDER_SOURCE_PKG/-/raw/main/PKGBUILD" || print err_no "fail" "Could not fetch $fetch" && print no "done"
    done

    print nor "Setting package name..."
    def=""
    if [[ -z "$KBUILDER_PKG_NAME_APPEND" ]]; then
        KBUILDER_PKG_NAME_APPEND="kbuilder-custom"
        PKGNAME="$KBUILDER_SOURCE_PKG-kbuilder-custom"
        def="default "
    fi
    PKGNAME="$KBUILDER_SOURCE_PKG-$KBUILDER_PKG_NAME_APPEND"
    print low "Using $def'$PKGNAME'"
    sed -i "s@pkgbase=$KBUILDER_SOURCE_PKG@pkgbase=$PKGNAME@" $KBUILDER_DIR/cache/PKGBUILD || print err "Could not set package name"

    print nor "Injecting bash shell and run-parts hook into PKGBUILD...."
    sed -i "/  _make olddefconfig/a \  run-parts --verbose --regex 'kbuilder-hook-*' $HOOKS_DIR" $KBUILDER_DIR/cache/PKGBUILD || print err "Could not inject run-parts hook into PKGBUILD"
    sed -i "/  make olddefconfig/a \  run-parts --verbose --regex 'kbuilder-hook-*' $HOOKS_DIR" $KBUILDER_DIR/cache/PKGBUILD || print err "Could not inject run-parts hook into PKGBUILD"
    sed -i "/  run-parts/a \  echo ''; echo 'This is an injected shell, you can apply any patches or modify the config now. Exit the shell to continue the build.'; bash" $KBUILDER_DIR/cache/PKGBUILD || print err "Could not inject bash shell into PKGBUILD"

    if [[ "$KBUILDER_SOURCE_PKG" == "linux-hardened" ]]; then
        print nor "Applying linux-hardened PKGBUILD compatibility fix..."
        sed -i "s@https://github.com/anthraxx/\${pkgbase}/releases/download/\${_srctag}/\${pkgbase}-\${_srctag}.patch{,.sig}@https://github.com/anthraxx/linux-hardened/releases/download/\${_srctag}/linux-hardened-\${_srctag}.patch{,.sig}@" $KBUILDER_DIR/cache/PKGBUILD || print err "Could not apply fix to PKGBUILD"
    fi

    print nor "Setting build jobs..."
    case $KBUILDER_BUILD_JOBS in
        ''|*[!0-9]*)
            print low "Using PKGBUILD's default"
            ;;
        *)
            print low "Using '-j$KBUILDER_BUILD_JOBS'"
            sed -i "s@make htmldocs all@make -j$KBUILDER_BUILD_JOBS all@" $KBUILDER_DIR/cache/PKGBUILD || print err "Could not inject argument into PKGBUILD"
            ;;
    esac

    print nor "Entering $KBUILDER_DIR/cache..."
    cd $KBUILDER_DIR/cache

    print nor "Running makepkg..."
    makepkg -s --skippgpcheck || print err "Command 'makepkg -s --skippgpcheck' did not complete successfully"
}

help() {
    cat <<-EOF
Usage: kbuilder <command>

$DESC

Commands:
    help        Show this message
    build       Fetch and build a kernel with makepkg
    install     Install the built kernel with pacman
    version     Show kbuilder version

Refer to man page for more information,
Report bugs at https://github.com/AnnikaV9/kbuilder/issues
EOF
}

action() {
    [[ $EUID = "0" ]] && print err "kbuilder should not be run as root."
    for dep in curl makepkg sudo sed rm cd cat mkdir run-parts; do
        command -v $dep >/dev/null || print err "Command '$dep' is not available"
    done
    command_$1
}

case "$1" in
    help) help ;;
    --help) help ;;
    -h) help ;;
    install) action install ;;
    build) action build ;;
    version) print no "kbuilder $VERSION" ;;
    --version) print no "kbuilder $VERSION" ;;
    -v) print no "kbuilder $VERSION" ;;
    -V) print no "kbuilder $VERSION" ;;
    *) print err_h "No valid command provided"  ;;
esac
